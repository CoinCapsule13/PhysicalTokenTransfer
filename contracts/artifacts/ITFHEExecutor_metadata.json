{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ct",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "toType",
						"type": "bytes1"
					}
				],
				"name": "cast",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheAdd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheBitAnd",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheBitOr",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheBitXor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheDiv",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheEq",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "rhs",
						"type": "bytes"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheEq",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheGe",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheGt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "control",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ifTrue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ifFalse",
						"type": "uint256"
					}
				],
				"name": "fheIfThenElse",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheLe",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheLt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheMax",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheMin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheMul",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "rhs",
						"type": "bytes"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheNe",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheNe",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ct",
						"type": "uint256"
					}
				],
				"name": "fheNeg",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ct",
						"type": "uint256"
					}
				],
				"name": "fheNot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes1",
						"name": "randType",
						"type": "bytes1"
					}
				],
				"name": "fheRand",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "upperBound",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "randType",
						"type": "bytes1"
					}
				],
				"name": "fheRandBounded",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheRem",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheRotl",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheRotr",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheShl",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheShr",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "lhs",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rhs",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "scalarByte",
						"type": "bytes1"
					}
				],
				"name": "fheSub",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "ct",
						"type": "bytes"
					},
					{
						"internalType": "bytes1",
						"name": "toType",
						"type": "bytes1"
					}
				],
				"name": "trivialEncrypt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "ct",
						"type": "uint256"
					},
					{
						"internalType": "bytes1",
						"name": "toType",
						"type": "bytes1"
					}
				],
				"name": "trivialEncrypt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "inputHandle",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "inputProof",
						"type": "bytes"
					},
					{
						"internalType": "bytes1",
						"name": "inputType",
						"type": "bytes1"
					}
				],
				"name": "verifyCiphertext",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"cast(uint256,bytes1)": {
					"params": {
						"ct": "Value to cast.",
						"toType": "Target type."
					},
					"returns": {
						"result": "  Result value of the target type."
					}
				},
				"fheAdd(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheBitAnd(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheBitOr(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheBitXor(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheDiv(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheEq(uint256,bytes,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheEq(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheGe(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheGt(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheIfThenElse(uint256,uint256,uint256)": {
					"params": {
						"control": "Control value.",
						"ifFalse": "If false.",
						"ifTrue": "If true."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheLe(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheLt(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheMax(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheMin(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheMul(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheNe(uint256,bytes,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheNe(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheNeg(uint256)": {
					"params": {
						"ct": "Ct"
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheNot(uint256)": {
					"params": {
						"ct": "Ct"
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheRand(bytes1)": {
					"params": {
						"randType": "Type for the random result."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheRandBounded(uint256,bytes1)": {
					"params": {
						"randType": "Type for the random result.",
						"upperBound": "Upper bound value."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheRem(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheRotl(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheRotr(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheShl(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheShr(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"fheSub(uint256,uint256,bytes1)": {
					"params": {
						"lhs": "LHS.",
						"rhs": "RHS.",
						"scalarByte": "Scalar byte."
					},
					"returns": {
						"result": "      Result."
					}
				},
				"trivialEncrypt(bytes,bytes1)": {
					"params": {
						"ct": "Value to encrypt.",
						"toType": "Target type."
					},
					"returns": {
						"result": "  Result value of the target type."
					}
				},
				"trivialEncrypt(uint256,bytes1)": {
					"params": {
						"ct": "Value to encrypt.",
						"toType": "Target type."
					},
					"returns": {
						"result": "  Result value of the target type."
					}
				},
				"verifyCiphertext(bytes32,address,bytes,bytes1)": {
					"params": {
						"callerAddress": "Address of the caller.",
						"inputHandle": "Input handle.",
						"inputProof": "Input proof.",
						"inputType": "Input type."
					},
					"returns": {
						"result": "        Result."
					}
				}
			},
			"title": "ITFHEExecutor",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"cast(uint256,bytes1)": {
					"notice": "Performs the casting to a target type."
				},
				"fheAdd(uint256,uint256,bytes1)": {
					"notice": "Computes fheAdd operation."
				},
				"fheBitAnd(uint256,uint256,bytes1)": {
					"notice": "Computes fheBitAnd operation."
				},
				"fheBitOr(uint256,uint256,bytes1)": {
					"notice": "Computes fheBitOr operation."
				},
				"fheBitXor(uint256,uint256,bytes1)": {
					"notice": "Computes fheBitXor operation."
				},
				"fheDiv(uint256,uint256,bytes1)": {
					"notice": "Computes fheDiv operation."
				},
				"fheEq(uint256,bytes,bytes1)": {
					"notice": "Computes FHEEq operation."
				},
				"fheEq(uint256,uint256,bytes1)": {
					"notice": "Computes fheEq operation."
				},
				"fheGe(uint256,uint256,bytes1)": {
					"notice": "Computes fheGe operation."
				},
				"fheGt(uint256,uint256,bytes1)": {
					"notice": "Computes fheGt operation."
				},
				"fheIfThenElse(uint256,uint256,uint256)": {
					"notice": "Computes FHEIfThenElse operation."
				},
				"fheLe(uint256,uint256,bytes1)": {
					"notice": "Computes fheLe operation."
				},
				"fheLt(uint256,uint256,bytes1)": {
					"notice": "Computes fheLt operation."
				},
				"fheMax(uint256,uint256,bytes1)": {
					"notice": "Computes fheMax operation."
				},
				"fheMin(uint256,uint256,bytes1)": {
					"notice": "Computes fheMin operation."
				},
				"fheMul(uint256,uint256,bytes1)": {
					"notice": "Computes fheMul operation."
				},
				"fheNe(uint256,bytes,bytes1)": {
					"notice": "Computes FHENe operation."
				},
				"fheNe(uint256,uint256,bytes1)": {
					"notice": "Computes fheNe operation."
				},
				"fheNeg(uint256)": {
					"notice": "Computes fheNeg operation."
				},
				"fheNot(uint256)": {
					"notice": "Computes fheNot operation."
				},
				"fheRand(bytes1)": {
					"notice": "Computes FHERand operation."
				},
				"fheRandBounded(uint256,bytes1)": {
					"notice": "Computes FHERandBounded operation."
				},
				"fheRem(uint256,uint256,bytes1)": {
					"notice": "Computes fheRem operation."
				},
				"fheRotl(uint256,uint256,bytes1)": {
					"notice": "Computes fheRotl operation."
				},
				"fheRotr(uint256,uint256,bytes1)": {
					"notice": "Computes fheRotr operation."
				},
				"fheShl(uint256,uint256,bytes1)": {
					"notice": "Computes fheShl operation."
				},
				"fheShr(uint256,uint256,bytes1)": {
					"notice": "Computes fheShr operation."
				},
				"fheSub(uint256,uint256,bytes1)": {
					"notice": "Computes fheSub operation."
				},
				"trivialEncrypt(bytes,bytes1)": {
					"notice": "Does trivial encryption."
				},
				"trivialEncrypt(uint256,bytes1)": {
					"notice": "Does trivial encryption."
				},
				"verifyCiphertext(bytes32,address,bytes,bytes1)": {
					"notice": "Verifies the ciphertext."
				}
			},
			"notice": "This interface contains all functions to conduct FHE operations.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PhysicalToken.sol": "ITFHEExecutor"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1363.sol": {
			"keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
				"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
			"license": "MIT",
			"urls": [
				"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
				"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC20.sol": {
			"keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
				"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/security/Pausable.sol": {
			"keccak256": "0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004",
				"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171",
				"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf",
			"license": "MIT",
			"urls": [
				"bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329",
				"dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
				"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b",
				"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ"
			]
		},
		"contracts/PhysicalToken.sol": {
			"keccak256": "0x8ce5776c0d92d142b6726e5f57dc68870571e41f805334c7529fb3a7c4ebcaec",
			"license": "MIT",
			"urls": [
				"bzz-raw://5c08a7e2df4a577d8cca084b70d3394befa5aca1269da01e9ddf06f6874d0190",
				"dweb:/ipfs/QmfGR8WCKgfJY3Vi9FMZz5hatGJoTKxcGqivYBz6P4XNqt"
			]
		}
	},
	"version": 1
}